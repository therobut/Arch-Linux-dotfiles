// Generated by CoffeeScript 1.6.3
(function() {
  var Settings, root;

  Settings = (function() {
    var get_key, local, settings, sync, syncLocal, syncRemote, _ref,
      _this = this;

    function Settings() {}

    _ref = [chrome.storage.sync, chrome.storage.local, {}], sync = _ref[0], local = _ref[1], settings = _ref[2];

    get_key = function(args) {
      var hostname, scope_key, _ref1, _ref2;
      if (args == null) {
        args = [];
      }
      _ref2 = [(_ref1 = args[args.length - 1]) != null ? _ref1['scope_key'] : void 0, document.location.hostname], scope_key = _ref2[0], hostname = _ref2[1];
      if ((hostname !== "") && hostname.match(/^\w+$/) && !hostname.match(/local/)) {
        scope_key = "background";
      }
      if (scope_key) {
        if (scope_key === "host") {
          scope_key = hostname;
        }
      } else {
        scope_key = $.isPlainObject(args[0]) ? "background" : (typeof args[0] === 'string') && args[0].startsWith("@") ? "background" : hostname;
      }
      return scope_key || "other";
    };

    syncLocal = function(callback) {
      var local_key;
      local_key = get_key(arguments);
      local.get(local_key, function(obj) {
        if (local_key !== "background") {
          return settings[local_key] = obj[local_key];
        }
      });
      return local.get("background", function(obj) {
        try {
          settings["background"] = obj['background'] || JSON.parse(localStorage['__vrome_setting'] || "{}");
          if ($.isFunction(callback)) {
            return callback.call();
          }
        } catch (_error) {}
      });
    };

    syncRemote = function() {
      var syncToRemote,
        _this = this;
      syncToRemote = function() {
        return sync.set({
          background: settings["background"]
        });
      };
      setInterval(syncToRemote, 1000 * 60);
      settings["background"] || (settings["background"] = {});
      return sync.get("background", function(obj) {
        return $.extend(settings["background"], obj["background"]);
      });
    };

    Settings.init = function(callback) {
      if (get_key() === 'background') {
        syncRemote();
      }
      syncLocal(callback);
      return chrome.storage.onChanged.addListener(syncLocal);
    };

    Settings.add = function(values) {
      var local_key, name, names, setting, value, _i, _len, _ref1, _ref2;
      local_key = get_key(arguments);
      if ($.isPlainObject(values)) {
        settings[local_key] || (settings[local_key] = {});
        $.extend(true, settings[local_key], values);
      } else {
        _ref1 = [arguments[0].trimFirst("@").split('.'), arguments[1], settings[local_key]], names = _ref1[0], value = _ref1[1], setting = _ref1[2];
        _ref2 = names.slice(0, -1);
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          name = _ref2[_i];
          setting[name] || (setting[name] = {});
          setting = setting[name];
        }
        setting[names[names.length - 1]] = value;
      }
      return local.set(settings);
    };

    Settings.get = function(names) {
      var name, setting, _i, _len, _ref1;
      try {
        setting = settings;
        if (names && (setting = setting[get_key(arguments)])) {
          _ref1 = names.trimFirst("@").split('.');
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            name = _ref1[_i];
            setting = setting[name];
          }
        }
        return setting;
      } catch (_error) {}
    };

    return Settings;

  }).call(this);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Settings = Settings;

}).call(this);
