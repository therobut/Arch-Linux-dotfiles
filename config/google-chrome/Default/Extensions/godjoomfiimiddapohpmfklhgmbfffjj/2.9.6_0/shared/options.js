// Generated by CoffeeScript 1.6.3
(function() {
  var Option, root;

  Option = (function() {
    var options;

    function Option() {}

    options = {
      nextpattern: ["(下|后)一?(页|頁|篇|张)", "^\\s*Next\\s*$", "^>$", "^More$", "(^(>>|››|»)\\|?)|((»|››|>>)\\|?$)"],
      previouspattern: ["(上|前)一(页|頁|篇|张)", "^\\s*Prev(ious)?\\s*$", "^<$", "(^(<<|‹‹|«)\\|?)|((<<|‹‹|«)\\|?$)"],
      enable_vrome_key: "<C-Esc>",
      disablesites: "",
      editor: "gvim -f",
      server_port: 20000,
      searchengines: {
        google: "http://www.google.com/search?q={{keyword}}",
        yahoo: "http://search.yahoo.com/search?p={{keyword}}",
        bing: "http://www.bing.com/search?q={{keyword}}",
        wikipedia: "http://en.wikipedia.org/wiki/{{keyword}}",
        answers: "http://www.answers.com/main/ntquery?s={{keyword}}",
        twitter: "https://twitter.com/search/{{keyword}}"
      },
      defaultsearch: "google",
      autocomplete_next: "<Down>",
      autocomplete_prev: "<Up>",
      autocomplete_next_10: "<Tab>",
      autocomplete_prev_10: "<S-Tab>",
      hintkeys: "asdfghjklqwertyuiopzxcvbnm",
      useletters: 1,
      showstatus: 1,
      show_disabled_text: 1,
      follow_new_tab: 1,
      sources_map: {
        jquery: 'http://code.jquery.com/jquery.js'
      }
    };

    Option.get = function(key) {
      var configure, e, is_plus, option, value, _ref, _ref1;
      configure = (_ref = Settings.get("@configure.set")) != null ? _ref[key] : void 0;
      option = options[key];
      if ($.isArray(configure)) {
        _ref1 = [configure[0], configure[1]], value = _ref1[0], is_plus = _ref1[1];
        if (option instanceof Array) {
          try {
            value = (value.startsWith("[") ? JSON.parse(value) : [value]);
          } catch (_error) {
            e = _error;
            value = [];
          }
          option = (is_plus ? option.concat(value) : value);
        } else if ($.isPlainObject(option)) {
          try {
            value = JSON.parse(value);
          } catch (_error) {
            e = _error;
            value = {};
          }
          if (is_plus) {
            $.extend(option, value);
          } else {
            option = value;
          }
        } else {
          option = (is_plus ? option + value : value);
        }
      }
      return option;
    };

    Option.default_search_url = function(url) {
      var searchengine, searchengines, _i, _len;
      searchengines = Option.get("searchengines");
      searchengine = searchengines[Option.get("defaultsearch")];
      if (searchengine) {
        return searchengine.replace("{{keyword}}", url);
      }
      for (_i = 0, _len = searchengines.length; _i < _len; _i++) {
        searchengine = searchengines[_i];
        return searchengine.replace("{{keyword}}", url);
      }
    };

    return Option;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Option = Option;

}).call(this);
