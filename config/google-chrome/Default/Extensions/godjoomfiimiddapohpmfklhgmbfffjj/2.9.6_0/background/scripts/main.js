// Generated by CoffeeScript 1.6.3
(function() {
  var m, root, _i, _len, _ref;

  this.Post = function(tab, message) {
    return chrome.tabs.sendMessage(tab.id, message, function(response) {});
  };

  this.getTab = function(args) {
    return args[args.length - 1];
  };

  this.runScript = function(msg) {
    var tab;
    tab = getTab(arguments);
    return chrome.tabs.executeScript(tab.id, {
      code: msg.code
    });
  };

  this.checkNewVersion = function() {
    return $.get(chrome.extension.getURL("manifest.json")).done(function(data) {
      data = JSON.parse(data);
      if (Settings.get("version") !== data.version) {
        openOptions("changelog");
      }
      return Settings.add({
        version: data.version
      });
    });
  };

  this.openHelpWebsite = function() {
    return this.openOrSelectUrl("https://github.com/jinzhu/vrome#readme");
  };

  this.openChromeStore = function() {
    return this.openOrSelectUrl("https://chrome.google.com/webstore/detail/godjoomfiimiddapohpmfklhgmbfffjj/details");
  };

  this.openIssuesPage = function() {
    return this.openOrSelectUrl("https://github.com/jinzhu/vrome/issues");
  };

  this.openSourcePage = function() {
    return this.openOrSelectUrl("https://github.com/jinzhu/vrome");
  };

  this.openOptions = function(params) {
    var url;
    url = "background/options.html" + (params ? "#" + params : "");
    return this.openOrSelectUrl(chrome.extension.getURL(url));
  };

  this.openOrSelectUrl = function(url) {
    var current_tab, msg, _ref;
    if (typeof url === 'string') {
      msg = {
        url: url,
        newtab: true,
        selected: true
      };
    } else {
      _ref = [url, getTab(arguments)], msg = _ref[0], current_tab = _ref[1];
      url = msg.url;
    }
    return chrome.tabs.getAllInWindow(null, function(tabs) {
      var tab, _i, _len;
      for (_i = 0, _len = tabs.length; _i < _len; _i++) {
        tab = tabs[_i];
        if (!(tab.url === url)) {
          continue;
        }
        chrome.tabs.update(tab.id, {
          selected: true
        });
        return;
      }
      return chrome.tabs.getSelected(null, function(get_tab) {
        return Tab.openUrl(msg, current_tab || get_tab);
      });
    });
  };

  window.addEventListener("error", (function(err) {
    return Debug(err);
  }), false);

  Settings.init(checkNewVersion);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  _ref = ["Post", "checkNewVersion", "getTab", "runScript", "storeLastCommand", "openHelpWebsite", "openChromeStore", "openIssuesPage", "openSourcePage", "openOptions", "openOrSelectUrl"];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    m = _ref[_i];
    root[m] = self[m];
  }

}).call(this);
