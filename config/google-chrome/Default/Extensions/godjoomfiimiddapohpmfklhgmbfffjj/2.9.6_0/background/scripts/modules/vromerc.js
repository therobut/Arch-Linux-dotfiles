// Generated by CoffeeScript 1.6.3
(function() {
  var Vromerc, root;

  Vromerc = (function() {
    function Vromerc() {}

    Vromerc.init = function() {
      var interval;
      Vromerc.loadAll(true);
      interval = (Settings.get("onlineVromercReloadInterval") || 5) * 1000 * 60;
      return setInterval(Vromerc.loadAll, interval);
    };

    Vromerc.loadAll = function() {
      Vromerc.loadOnline();
      return Vromerc.loadLocal();
    };

    Vromerc.parse = function(text) {
      var config, configs, is_plus, key, line, method, setting, setting_key, setting_value, url_marks, value, _i, _len, _ref, _ref1, _ref2;
      setting = {};
      _ref = [{}, {}, {}, {}, {}, {}], setting.imap = _ref[0], setting.map = _ref[1], setting.cmap = _ref[2], setting.unmap = _ref[3], setting.iunmap = _ref[4], setting.set = _ref[5];
      configs = [];
      url_marks = Settings.get("url_marks") || {};
      _ref1 = text.split("\n");
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        line = _ref1[_i];
        line = line.trim();
        _ref2 = line.split(/\s+/), method = _ref2[0], key = _ref2[1], value = _ref2[2];
        if (method === "imap" || method === "map" || method === "cmap") {
          configs.push(line);
          setting[method][key] = value;
        } else if (method === "unmap" || method === "iunmap") {
          configs.push(line);
          setting[method][key] = true;
        } else if (method === "set") {
          configs.push(line);
          config = line.trimFirst(method);
          setting_key = config.split(/\+?=/)[0];
          setting_value = config.trimFirst(setting_key + "=").trimFirst(setting_key + "+=");
          if (!isNaN(setting_value)) {
            setting_value = Number(setting_value);
          }
          is_plus = (line.match(/^\s*set\s+\w+\+=/) ? true : false);
          if (setting_key.startsWith("qm_")) {
            url_marks[setting_key.replace("qm_", "")] = setting_value;
          } else {
            setting.set[setting_key] = [setting_value, is_plus];
          }
        } else if (line.match(/^\s*$/)) {
          configs.push(line);
        } else {
          configs.push(line.replace(/^"?\s{0,1}/, "\" "));
        }
      }
      Settings.add("url_marks", url_marks);
      Settings.add("configure", setting);
      return configs.join("\n");
    };

    Vromerc.loadLocal = function() {
      var _this = this;
      return $.get(getLocalServerUrl()).done(function(data) {
        var vromerc;
        if (data) {
          vromerc = "\" Begin Local Vromerc generated\n" + data + "\n\" End Local Vromerc generated\n\n";
          vromerc = vromerc + (Settings.get("vromerc") || "").replace(/" Begin Local Vromerc generated\n(.|\n)+\n" End Local Vromerc generated\n?\n?/g, "");
          return Settings.add({
            vromerc: _this.parse(vromerc)
          });
        }
      });
    };

    Vromerc.loadOnline = function() {
      var url,
        _this = this;
      url = Settings.get("onlineVromercUrl");
      if (!url) {
        return false;
      }
      if (!url.match(/^http/)) {
        url = "http://" + url;
      }
      return $.get(url).done(function(data) {
        var vromerc;
        vromerc = "\" Begin Online Vromerc generated\n" + data + "\n\" End Online Vromerc generated\n\n";
        vromerc = vromerc + (Settings.get("vromerc") || "").replace(/" Begin Online Vromerc generated\n(.|\n)+\n" End Online Vromerc generated\n?\n?/g, "");
        return Settings.add({
          vromerc: _this.parse(vromerc),
          onlineVromercLastUpdatedAt: new Date().toString()
        });
      });
    };

    return Vromerc;

  }).call(this);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Vromerc = Vromerc;

}).call(this);
