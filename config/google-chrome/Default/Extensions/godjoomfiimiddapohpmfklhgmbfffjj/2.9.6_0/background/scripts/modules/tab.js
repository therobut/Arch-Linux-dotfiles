// Generated by CoffeeScript 1.6.3
(function() {
  var Tab, root;

  Tab = (function() {
    var remove, runWhenComplete, _ref,
      _this = this;

    function Tab() {}

    _ref = [[], null, [], []], Tab.closedTabs = _ref[0], Tab.lastTab = _ref[1], Tab.last_open_tabs = _ref[2], Tab.marked_tabs = _ref[3];

    remove = function(tab) {
      if (!tab) {
        return;
      }
      Tab.addToClosedTabs(tab);
      return chrome.tabs.remove(tab.id);
    };

    runWhenComplete = function(tabId, command) {
      return chrome.tabs.get(tabId, function(tab) {
        if (tab.status === "complete") {
          return chrome.tabs.executeScript(tabId, command);
        } else {
          return runWhenComplete(tabId, command);
        }
      });
    };

    Tab.autoComplete = function(msg) {
      var keyword, return_urls, tab, _ref1;
      _ref1 = [getTab(arguments), msg.keyword, []], tab = _ref1[0], keyword = _ref1[1], return_urls = _ref1[2];
      if (msg.default_urls) {
        return_urls.push({
          url: msg.default_urls
        });
      }
      if (Option.get("noautocomplete")) {
        return Post(tab, {
          action: "Dialog.draw",
          urls: return_urls,
          keyword: keyword
        });
      }
      return chrome.bookmarks.search(keyword, function(bookmarks) {
        var start_time;
        start_time = new Date().getTime() - 1000 * 60 * 60 * 24 * 10;
        return chrome.history.search({
          text: keyword,
          maxResults: 30,
          startTime: start_time
        }, function(historys) {
          return Post(tab, {
            action: "Dialog.draw",
            urls: return_urls.concat(bookmarks.concat(historys)),
            keyword: keyword
          });
        });
      });
    };

    Tab.openUrl = function(msg) {
      var first_url, index, openUrls, tab, urls, _ref1, _ref2;
      _ref1 = [getTab(arguments), msg.urls || msg.url], tab = _ref1[0], urls = _ref1[1];
      if (typeof urls === "string") {
        urls = [urls];
      }
      _ref2 = [urls.shift(), tab.index], first_url = _ref2[0], index = _ref2[1];
      openUrls = function(window) {
        var url, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = urls.length; _i < _len; _i++) {
          url = urls[_i];
          _results.push(chrome.tabs.create({
            windowId: window.id,
            url: url,
            index: ++index,
            selected: false
          }));
        }
        return _results;
      };
      if (msg.incognito) {
        return chrome.windows.create({
          incognito: true,
          url: first_url
        }, openUrls);
      } else {
        if (msg.newtab) {
          chrome.tabs.create({
            url: first_url,
            index: ++index,
            selected: msg.selected || Option.get("follow_new_tab") === 1
          });
        } else {
          Tab.update({
            url: first_url
          }, tab);
        }
        return chrome.windows.getCurrent(openUrls);
      }
    };

    Tab.openFromClipboard = function(msg) {
      var url;
      url = Clipboard.read();
      if (!url.isValidURL()) {
        url = Option.default_search_url(url);
      }
      return Tab.openUrl({
        url: url,
        newtab: msg.newtab,
        selected: msg.selected
      }, getTab(arguments));
    };

    Tab.reopen = function(msg) {
      var index, last_closed_tab;
      if (Tab.closedTabs.length > 0) {
        index = (Tab.closedTabs.length - msg.count) % Tab.closedTabs.length;
        last_closed_tab = Tab.closedTabs[index];
        if (last_closed_tab) {
          Tab.closedTabs.splice(index, 1);
          return chrome.tabs.create({
            url: last_closed_tab.url,
            index: last_closed_tab.index
          });
        }
      }
    };

    Tab.update = function(msg) {
      var attr, tab, _ref1;
      _ref1 = [getTab(arguments), {}], tab = _ref1[0], attr = _ref1[1];
      if (typeof msg.url !== "undefined") {
        attr.url = msg.url;
      }
      if (typeof msg.active !== "undefined") {
        attr.active = msg.active;
      }
      if (typeof msg.highlighted !== "undefined") {
        attr.highlighted = msg.highlighted;
      }
      if (typeof msg.pinned !== "undefined") {
        attr.pinned = msg.pinned;
      }
      return chrome.tabs.update(tab.id, attr, function(new_tab) {
        if (msg.callback) {
          return runWhenComplete(new_tab.id, {
            code: msg.callback
          });
        }
      });
    };

    Tab.move = function(msg) {
      var direction, tab, times, _ref1;
      _ref1 = [getTab(arguments), msg.count, msg.direction === "left" ? -1 : 1], tab = _ref1[0], times = _ref1[1], direction = _ref1[2];
      return chrome.tabs.query({
        windowId: tab.windowId
      }, function(tabs) {
        var newIndex;
        newIndex = (tab.index + times * direction) % tabs.length;
        return chrome.tabs.move(tab.id, {
          index: newIndex
        });
      });
    };

    Tab.close = function(msg) {
      var cond, count, index, tab, _ref1, _ref2, _ref3;
      _ref2 = [getTab(arguments), msg.type, (_ref1 = msg.count) != null ? _ref1 : 0], tab = _ref2[0], cond = _ref2[1], count = _ref2[2];
      index = (_ref3 = msg.index) != null ? _ref3 : tab.index;
      if (msg.focusLast) {
        Tab.selectPrevious.apply("", arguments);
      }
      if (msg.offset) {
        Tab.select.apply("", arguments);
      }
      return chrome.windows.getAll({
        populate: true
      }, function(windows) {
        var t, w, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = windows.length; _i < _len; _i++) {
          w = windows[_i];
          _results.push((function() {
            var _j, _len1, _ref4, _results1;
            _ref4 = w.tabs.reverse();
            _results1 = [];
            for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
              t = _ref4[_j];
              if (cond === 'otherWindows') {
                if (w.id !== tab.windowId) {
                  _results1.push(remove(t));
                } else {
                  _results1.push(void 0);
                }
              } else if (w.id === tab.windowId) {
                if (((cond === 'closeOther') && (t.id !== tab.id)) || ((cond === 'closeLeft') && (t.index < index) && (count === 0 ? true : t.index >= index - count)) || ((cond === 'closeRight') && (t.index > index) && (count === 0 ? true : t.index <= index + count)) || ((cond === 'closePinned') && t.pinned) || ((cond === 'closeUnPinned') && !t.pinned) || (!cond && (t.index >= index) && (t.index < (index + Math.max(1, count))))) {
                  _results1.push(remove(t));
                } else {
                  _results1.push(void 0);
                }
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          })());
        }
        return _results;
      });
    };

    Tab.select = function(msg) {
      var tab;
      tab = getTab(arguments);
      return chrome.tabs.getAllInWindow(tab.windowId, function(tabs) {
        var index;
        if (typeof msg.index !== "undefined") {
          index = Math.min(msg.index, tabs.length - 1);
        }
        if (typeof msg.offset !== "undefined") {
          index = rabs(tab.index + msg.offset, tabs.length);
        }
        return chrome.tabs.update(tabs.splice(index, 1)[0].id, {
          selected: true
        });
      });
    };

    Tab.selectPrevious = function() {
      var tab;
      tab = getTab(arguments);
      if (Tab.lastTab) {
        return chrome.tabs.update(Tab.lastTab.id, {
          selected: true
        });
      }
    };

    Tab.selectLastOpen = function(msg) {
      var index;
      index = rabs(Tab.last_open_tabs.length - msg.count, Tab.last_open_tabs.length);
      return Tab.update({
        active: true
      }, Tab.last_open_tabs[index]);
    };

    Tab.toggleViewSource = function(msg) {
      var tab, url;
      tab = getTab(arguments);
      url = tab.url.replace(/^(view-source:)?/, (/^view-source:/.test(tab.url) ? '' : "view-source:"));
      return Tab.openUrl({
        urls: url,
        newtab: msg.newtab
      }, tab);
    };

    Tab.reload = function(msg) {
      var tab;
      tab = getTab(arguments);
      if (msg.reloadAll) {
        return chrome.tabs.getAllInWindow(tab.windowId, function(tabs) {
          var t, _i, _len, _ref1, _results;
          _ref1 = tabs.reverse();
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            t = _ref1[_i];
            _results.push(chrome.tabs.reload(t.id));
          }
          return _results;
        });
      } else {
        return chrome.tabs.reload(tab.id, {
          bypassCache: !!msg.bypassCache
        });
      }
    };

    Tab.togglePin = function() {
      var tab;
      tab = getTab(arguments);
      return Tab.update({
        pinned: !tab.pinned
      }, tab);
    };

    Tab.unpinAll = function(msg) {
      var tab;
      tab = getTab(arguments);
      return chrome.windows.getAll({
        populate: true
      }, function(windows) {
        var t, w, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = windows.length; _i < _len; _i++) {
          w = windows[_i];
          _results.push((function() {
            var _j, _len1, _ref1, _results1;
            _ref1 = w.tabs;
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              t = _ref1[_j];
              if (t.pinned && (msg.allWindows || (w.id === tab.windowId))) {
                _results1.push(this.update({
                  pinned: false
                }, t));
              }
            }
            return _results1;
          }).call(Tab));
        }
        return _results;
      });
    };

    Tab.duplicate = function(msg) {
      var count, index, tab, _ref1, _ref2, _results;
      tab = getTab(arguments);
      _ref2 = [tab.index, (_ref1 = msg.count) != null ? _ref1 : 1], index = _ref2[0], count = _ref2[1];
      _results = [];
      while (count-- > 0) {
        _results.push(chrome.tabs.create({
          url: tab.url,
          index: ++index,
          selected: false
        }));
      }
      return _results;
    };

    Tab.detach = function() {
      var tab;
      tab = getTab(arguments);
      return chrome.windows.create({
        tabId: tab.id,
        incognito: tab.incognito
      });
    };

    Tab.makeLastTabIncognito = function() {
      var tab;
      tab = Tab.last_open_tabs[Tab.last_open_tabs.length - 1];
      if (tab) {
        return openInIncognito(tab);
      }
    };

    Tab.toggleIncognito = function() {
      var incognito, tab;
      tab = getTab(arguments);
      incognito = !tab.incognito;
      return chrome.tabs.query({
        windowId: tab.windowId
      }, function(tabs) {
        return Window.moveTabToWindowWithIncognito(tab, incognito, function(t) {
          return chrome.tabs.remove(t.id);
        });
      });
    };

    Tab.markForMerging = function(msg) {
      var tab;
      tab = getTab(arguments);
      return chrome.tabs.query({
        windowId: tab.windowId
      }, function(tabs) {
        var index, t, title, _i, _len;
        if (!msg.all) {
          tabs = [tab];
        }
        for (_i = 0, _len = tabs.length; _i < _len; _i++) {
          t = tabs[_i];
          index = Tab.marked_tabs.indexOf(t.id);
          if (index !== -1) {
            Tab.marked_tabs.splice(index, 1);
          } else if (t.url) {
            Tab.marked_tabs.push(t.id);
          }
        }
        title = "" + Tab.marked_tabs.length + " Tab(s) marked";
        return Post(tab, {
          action: "CmdBox.set",
          title: title,
          timeout: 4000
        });
      });
    };

    Tab.mergeMarkedTabs = function() {
      var tab;
      tab = getTab(arguments);
      if (Tab.marked_tabs.length === 0) {
        return;
      }
      return chrome.windows.get(tab.windowId, function(window) {
        var index, tabId, _i, _len, _ref1;
        _ref1 = Tab.marked_tabs;
        for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
          tabId = _ref1[index];
          chrome.tabs.get(tabId, function(tab) {
            if (window.incognito === tab.incognito) {
              return chrome.tabs.move(tab.id, {
                windowId: window.id,
                index: -1
              });
            } else {
              chrome.tabs.create({
                windowId: window.id,
                url: tab.url
              });
              return chrome.tabs.remove(tab.id);
            }
          });
        }
        return Tab.marked_tabs = [];
      });
    };

    Tab.addToClosedTabs = function(tab) {
      var index, t;
      index = ((function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.closedTabs;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          t = _ref1[_i];
          _results.push(t.url);
        }
        return _results;
      }).call(Tab)).indexOf(tab.url);
      if (index !== -1) {
        Tab.closedTabs.splice(index, 1);
      }
      if (tab.url !== "chrome://newtab/") {
        return Tab.closedTabs.push(tab);
      }
    };

    return Tab;

  }).call(this);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Tab = Tab;

}).call(this);
