// Generated by CoffeeScript 1.6.3
(function() {
  var cmapFunc, extractFunction, imapFunc, jump_keys, mapFunc, mark_keys, nmapFunc, num, root, url, _i, _j, _k, _len, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.AcceptKey = ["<Enter>", "<C-j>", "<C-m>"];

  root.CtrlAcceptKey = ["<C-Enter>"];

  root.CancelKey = ["<Esc>", "<C-[>"];

  root.CtrlEscapeKey = ["<C-Esc>"];

  root.isControlKey = function(key) {
    return key === "Control" || key === "Shift" || key === "Alt" || key === "Win";
  };

  root.isCtrlAcceptKey = function(key) {
    return __indexOf.call(CtrlAcceptKey, key) >= 0;
  };

  root.isAcceptKey = function(key) {
    return __indexOf.call(AcceptKey, key) >= 0;
  };

  root.isEscapeKey = function(key) {
    return __indexOf.call(CancelKey, key) >= 0;
  };

  root.isCtrlEscapeKey = function(key) {
    if (Option.get("enable_vrome_key") === key) {
      return true;
    }
    return __indexOf.call(CtrlEscapeKey, key) >= 0;
  };

  root.AcceptKeyFunction = function() {
    Search.onAcceptKeyPressed();
    Dialog.openCurrent();
    Buffer.gotoFirstMatchHandle();
    Buffer.deleteMatchHandle();
    return Buffer.deleteNoteMatchHandle();
  };

  root.CtrlAcceptKeyFunction = function() {
    Dialog.openCurrentNewTab();
    return Search.openCurrentNewTab();
  };

  root.CancelKeyFunction = function() {
    Hint.remove();
    InsertMode.blurFocus();
    KeyEvent.reset();
    Search.stop();
    Dialog.stop(true);
    Buffer.reset();
    CmdBox.remove();
    return Help.hide(true);
  };

  desc(root.CancelKeyFunction, "Cancel Actions");

  extractFunction = function(functionName) {
    var action, func, _i, _len, _ref;
    _ref = functionName.split(".");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      action = _ref[_i];
      func = (func != null ? func : root)[action];
    }
    return func;
  };

  imapFunc = function(key, func, virtual_key) {
    var k, keys, _i, _len;
    keys = $.isArray(key) ? key : [key];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      k = keys[_i];
      KeyEvent.add(k, extractFunction(func), true);
    }
    return Help.add(virtual_key != null ? virtual_key : key, func, extractFunction(func), "i");
  };

  nmapFunc = function(key, func, virtual_key) {
    var k, keys, _i, _len;
    keys = $.isArray(key) ? key : [key];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      k = keys[_i];
      KeyEvent.add(k, extractFunction(func));
    }
    return Help.add(virtual_key != null ? virtual_key : key, func, extractFunction(func), "n");
  };

  cmapFunc = function(key, func, virtual_key) {
    var k, keys, _i, _len;
    keys = $.isArray(key) ? key : [key];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      k = keys[_i];
      CmdLine.add(k, extractFunction(func));
    }
    return Help.add(virtual_key != null ? virtual_key : key, func, extractFunction(func), "c");
  };

  mapFunc = function(key, func, virtual_key) {
    nmapFunc(key, func, virtual_key);
    return imapFunc(key, func, virtual_key);
  };

  nmapFunc("<F1>", "Help.show");

  nmapFunc(":", "CmdLine.start");

  mapFunc(AcceptKey, "AcceptKeyFunction");

  mapFunc(CancelKey, "CancelKeyFunction");

  mapFunc(CtrlAcceptKey, "CtrlAcceptKeyFunction");

  nmapFunc("<C-z>", "KeyEvent.disable");

  nmapFunc("<C-v>", "KeyEvent.passNextKey");

  nmapFunc(".", "KeyEvent.runLast");

  nmapFunc("zi", "Zoom.current_in");

  nmapFunc("zo", "Zoom.current_out");

  nmapFunc("zm", "Zoom.current_more");

  nmapFunc("zr", "Zoom.current_reduce");

  nmapFunc("zz", "Zoom.current_reset");

  nmapFunc("zI", "Zoom.zoomIn");

  nmapFunc("zO", "Zoom.out");

  nmapFunc("zM", "Zoom.more");

  nmapFunc("zR", "Zoom.reduce");

  nmapFunc("zZ", "Zoom.reset");

  nmapFunc("gg", "Scroll.top");

  nmapFunc("G", "Scroll.bottom");

  nmapFunc("0", "Scroll.first");

  nmapFunc("$", "Scroll.last");

  nmapFunc("%", "Scroll.toPercent");

  nmapFunc("k", "Scroll.up");

  nmapFunc("j", "Scroll.down");

  nmapFunc("h", "Scroll.left");

  nmapFunc("l", "Scroll.right");

  nmapFunc("<C-f>", "Scroll.nextPage");

  nmapFunc("<C-b>", "Scroll.prevPage");

  nmapFunc("<C-d>", "Scroll.nextHalfPage");

  nmapFunc("<C-u>", "Scroll.prevHalfPage");

  nmapFunc("gi", "InsertMode.focusFirstTextInput");

  nmapFunc("]]", "Page.next");

  nmapFunc("[[", "Page.prev");

  nmapFunc("Y", "Page.copySelected");

  nmapFunc("<C-g>", "Page.showInfo");

  nmapFunc("]f", "Frame.next");

  nmapFunc("[f", "Frame.prev");

  nmapFunc("gf", "Url.viewSource");

  nmapFunc("gF", "Url.viewSourceNewTab");

  nmapFunc("y", "Tab.copyUrl");

  nmapFunc("p", "Url.openFromClipboard");

  nmapFunc("P", "Url.openFromClipboardNewTab");

  nmapFunc("<M-p>", "Url.openFromClipboardAndFocusNewTab");

  nmapFunc("<C-a>", "Url.increment");

  nmapFunc("<C-x>", "Url.decrement");

  nmapFunc("gu", "Url.parent");

  nmapFunc("gU", "Url.root");

  nmapFunc("gr", "Url.referer");

  nmapFunc("gR", "Url.tabReferer");

  nmapFunc("o", "Url.open");

  nmapFunc("O", "Url.openWithDefault");

  nmapFunc("t", "Url.tabopen");

  nmapFunc("T", "Url.tabopenWithDefault");

  nmapFunc("<C-y>", "Url.shortUrl");

  nmapFunc("r", "Tab.reload");

  nmapFunc("<C-r>", "Tab.reloadWithoutCache");

  nmapFunc("R", "Tab.reloadAll");

  nmapFunc(["<C-p>", "gT"], "Tab.prev");

  nmapFunc(["<C-n>", "gt"], "Tab.next");

  nmapFunc("gq", "Tab.moveLeft");

  nmapFunc("ge", "Tab.moveRight");

  nmapFunc("b", "Buffer.gotoFirstMatch");

  nmapFunc(["dm", "B"], "Buffer.deleteMatch");

  nmapFunc("<M-b>", "Buffer.deleteNotMatch");

  nmapFunc(["g0", "g^"], "Tab.first");

  nmapFunc("g$", "Tab.last");

  nmapFunc("gl", "Tab.selectLastOpen");

  nmapFunc(["<C-6>", "<C-^>"], "Tab.selectPrevious");

  nmapFunc("dc", "Tab.close");

  nmapFunc("D", "Tab.closeAndFoucsLeft");

  nmapFunc("<M-d>", "Tab.closeAndFoucsLast");

  nmapFunc("do", "Tab.closeOtherTabs");

  nmapFunc("dl", "Tab.closeLeftTabs");

  nmapFunc("dr", "Tab.closeRightTabs");

  nmapFunc("u", "Tab.reopen");

  nmapFunc("gd", "Tab.duplicate");

  nmapFunc("gD", "Tab.detach");

  nmapFunc("dp", "Tab.closeUnPinnedTabs");

  nmapFunc("dP", "Tab.closePinnedTabs");

  nmapFunc("gp", "Tab.togglePin");

  nmapFunc("gP", "Tab.unpinAllTabsInCurrentWindow");

  nmapFunc("gwP", "Tab.unpinAllTabsInAllWindows");

  nmapFunc("gI", "Tab.toggleIncognito");

  nmapFunc("gm", "Tab.markForMerging");

  nmapFunc("gM", "Tab.markAllForMerging");

  nmapFunc("gv", "Tab.mergeMarkedTabs");

  nmapFunc(["H", "<C-o>"], "History.back");

  nmapFunc(["L", "<C-i>"], "History.forward");

  nmapFunc("gh", "History.start");

  nmapFunc("gH", "History.newTabStart");

  nmapFunc("gb", "Bookmark.start");

  nmapFunc("gB", "Bookmark.newTabStart");

  nmapFunc("f", "Hint.start");

  nmapFunc("F", "Hint.newTabStart");

  nmapFunc("<M-f>", "Hint.multiModeStart");

  nmapFunc(["/", "*"], "Search.start");

  nmapFunc(["?", "#"], "Search.backward");

  nmapFunc("n", "Search.next");

  nmapFunc("N", "Search.prev");

  imapFunc("<M-Enter>", "Search.next");

  imapFunc("<S-Enter>", "Search.prev");

  for (num = _i = 65; _i <= 122; num = ++_i) {
    if (__indexOf.call([91, 92, 93, 94, 95, 96], num) < 0) {
      mark_keys = 'm' + String.fromCharCode(num);
    }
  }

  nmapFunc(mark_keys, "Marks.addLocalMark", "m[a-z][0-9]");

  for (num = _j = 65; _j <= 122; num = ++_j) {
    if (__indexOf.call([91, 92, 93, 94, 95, 96], num) < 0) {
      jump_keys = "'" + String.fromCharCode(num);
    }
  }

  nmapFunc(jump_keys, "Marks.addLocalMark", "'[a-z][0-9]");

  nmapFunc("M", "Marks.addQuickMark");

  nmapFunc("go", "Marks.gotoQuickMark");

  nmapFunc("gn", "Marks.gotoQuickMarkNewTab");

  imapFunc("<C-i>", "InsertMode.externalEditor");

  imapFunc("<C-u>", "InsertMode.deleteToBeginCurrentLine");

  imapFunc("<C-k>", "InsertMode.deleteToEndCurrentLine");

  imapFunc("<C-a>", "InsertMode.moveToFirstOrSelectAll");

  imapFunc("<C-e>", "InsertMode.moveToEnd");

  imapFunc("<M-a>", "InsertMode.moveToBeginCurrentLine");

  imapFunc("<M-e>", "InsertMode.moveToEndCurrentLine");

  imapFunc(["<M-y>", "<M-w>"], "InsertMode.deleteBackwardWord");

  imapFunc("<M-o>", "InsertMode.deleteForwardWord");

  imapFunc("<M-u>", "InsertMode.deleteBackwardChar");

  imapFunc("<M-i>", "InsertMode.deleteForwardChar");

  imapFunc("<M-h>", "InsertMode.moveBackwardWord");

  imapFunc("<M-l>", "InsertMode.moveForwardWord");

  imapFunc("<M-j>", "InsertMode.moveBackwardChar");

  imapFunc("<M-k>", "InsertMode.moveForwardChar");

  imapFunc("<M-n>", "InsertMode.moveForwardLine");

  imapFunc("<M-m>", "InsertMode.moveBackwardLine");

  imapFunc("<M-z>", "InsertMode.restoreLastValue");

  cmapFunc("help", "Help.show");

  cmapFunc("buffer_delete_matched", "Buffer.deleteMatchHandle");

  cmapFunc("buffer_keep_matched", "Buffer.deleteNoteMatchHandle");

  cmapFunc("make_links", "AutoLink.makeLink");

  cmapFunc("images_toggle", "Command.imagesToggle");

  cmapFunc("images_only", "Command.imagesOnly");

  cmapFunc("javascript", "Command.javascript");

  cmapFunc("css", "Command.css");

  cmapFunc("source", "Command.source");

  cmapFunc("reload_extension", "Command.reloadExtension");

  cmapFunc("print", "Command.print");

  cmapFunc("capture", "Window.capture");

  cmapFunc("saveas", "Window.saveas");

  cmapFunc("quit", "Tab.close");

  cmapFunc("window_open", "Window.create");

  cmapFunc("window_only", "Window.only");

  cmapFunc("window_close", "Window.close");

  cmapFunc("window_closeall", "Window.closeAll");

  _ref = ['downloads', 'bookmarks', 'history', 'chrome_help', 'settings', 'extensions', 'github', 'issues', 'options'];
  for (_k = 0, _len = _ref.length; _k < _len; _k++) {
    url = _ref[_k];
    cmapFunc(["open_" + url + "!", "open_" + url], "Links." + url);
  }

}).call(this);
