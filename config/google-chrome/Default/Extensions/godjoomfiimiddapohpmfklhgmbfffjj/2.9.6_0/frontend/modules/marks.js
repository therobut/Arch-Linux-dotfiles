// Generated by CoffeeScript 1.6.3
(function() {
  var Marks, root;

  Marks = (function() {
    var filterQuickMarks, handleAddMark;

    function Marks() {}

    Marks.addLocalMark = function() {
      var key, local_marks, setting_key;
      key = getKey(this);
      setting_key = (key.match(/^[A-Z]$/) ? "@local_marks" : "local_marks");
      local_marks = Settings.get(setting_key) || {};
      local_marks[key] = [scrollX, scrollY, location.href];
      Settings.add(setting_key, local_marks);
      return CmdBox.set({
        title: "Added Local Mark " + key,
        timeout: 1000
      });
    };

    desc(Marks.addLocalMark, "Mark position x,y on the page e.g ma");

    Marks.gotoLocalMark = function() {
      var key, position, setting_key, _ref;
      key = getKey(this);
      setting_key = (key.match(/^[A-Z]$/) ? "@local_marks" : "local_marks");
      position = (_ref = Settings.get(setting_key)) != null ? _ref[key] : void 0;
      if (position instanceof Array) {
        if (key.match(/^[A-Z]$/)) {
          return Post({
            action: "Tab.update",
            url: position[2],
            callback: "scrollTo(" + position[0] + ", " + position[1] + ")"
          });
        } else {
          return scrollTo(position[0], position[1]);
        }
      } else {
        return CmdBox.set({
          title: "Mark " + key + " not set",
          timeout: 1000
        });
      }
    };

    desc(Marks.gotoLocalMark, "Go to marked position on the page e.g 'a");

    filterQuickMarks = function(newtab) {
      return function(keyword) {
        var cuteMarks, key, mark, marks;
        marks = Settings.get("@url_marks") || {};
        cuteMarks = (function() {
          var _results;
          _results = [];
          for (key in marks) {
            mark = marks[key];
            if (key.startsWith(keyword)) {
              _results.push({
                title: key,
                url: mark
              });
            }
          }
          return _results;
        })();
        if (cuteMarks.length === 1) {
          return Post({
            action: "Tab.openUrl",
            url: cuteMarks[0]['url'],
            newtab: newtab
          });
        } else {
          return Dialog.draw({
            urls: cuteMarks,
            keyword: ""
          });
        }
      };
    };

    Marks.addQuickMark = function() {
      return Dialog.start({
        title: "Add Quick Mark",
        search: filterQuickMarks,
        callback: handleAddMark
      });
    };

    desc(Marks.addQuickMark, "Add new quick mark for current URL");

    Marks.gotoQuickMarkNewTab = function() {
      return Marks.gotoQuickMark(true);
    };

    desc(Marks.gotoQuickMarkNewTab, "Same as `go`, but open in new tab (support Dialog extend mode)");

    Marks.gotoQuickMark = function(newtab) {
      var title;
      title = (newtab ? "Open Quick Mark (new tab)" : "Open Quick Mark");
      return Dialog.start({
        title: title,
        search: filterQuickMarks(newtab),
        newtab: newtab
      });
    };

    desc(Marks.gotoQuickMark, "Go to quick mark (support Dialog extend mode)");

    Marks.deleteQuickMark = function(keyword) {
      var marks;
      marks = Settings.get("url_marks") || {};
      if (marks[keyword]) {
        delete marks[keyword];
      }
      return Settings.add({
        url_marks: marks
      });
    };

    handleAddMark = function(e) {
      var key, keyword, _ref;
      _ref = [getKey(e), CmdBox.get().content.trim()], key = _ref[0], keyword = _ref[1];
      if (isAcceptKey(key)) {
        Settings.add("@url_marks." + keyword, window.location.href);
        Dialog.stop(true);
        return CmdBox.set({
          title: "Added Quick Mark " + keyword,
          timeout: 2000
        });
      }
    };

    return Marks;

  }).call(this);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Marks = Marks;

}).call(this);
