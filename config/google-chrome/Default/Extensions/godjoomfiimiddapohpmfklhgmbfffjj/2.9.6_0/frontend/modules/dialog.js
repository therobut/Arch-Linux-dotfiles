// Generated by CoffeeScript 1.6.3
(function() {
  var Dialog, root;

  Dialog = (function() {
    var delayToWaitKeyDown, dialogBox, dialogMode, handleInput, lastKeyword, lastSearchTimeout, newTab, next, notice, notice_id, prev, quick_num, searchFunc, search_result, searching, selected_class, setResultBox, setSelected, tabFunc, _ref, _ref1,
      _this = this;

    function Dialog() {}

    _ref = [null, null, null, null, null], dialogMode = _ref[0], searchFunc = _ref[1], tabFunc = _ref[2], lastKeyword = _ref[3], newTab = _ref[4], lastSearchTimeout = _ref[5], searching = _ref[6];

    _ref1 = ["__vrome_search_result", "__vrome_selected", "__vrome_quick_num", "__vrome_dialog_notice"], search_result = _ref1[0], selected_class = _ref1[1], quick_num = _ref1[2], notice_id = _ref1[3];

    dialogBox = function() {
      if ($("#__vrome_dialog").length === 0) {
        $("body").prepend($("<div>", {
          id: "__vrome_dialog",
          style: "bottom: " + (CmdBox.cmdBox().outerHeight()) + "px"
        }));
      }
      return $("#__vrome_dialog");
    };

    setResultBox = function(results, append) {
      var result, _i, _len;
      if (append == null) {
        append = false;
      }
      if (!append) {
        $("." + search_result).remove();
      }
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        result = results[_i];
        if ($.isArray(result)) {
          setResultBox(result, true);
        } else {
          dialogBox().append($("<div>", {
            "class": search_result
          }).append(result));
        }
      }
      return setSelected(0);
    };

    setSelected = function(num) {
      var index, max_num, results, _i, _j, _ref2, _ref3, _results;
      if (num == null) {
        num = 0;
      }
      _ref2 = [num, $("." + search_result)], Dialog.selected = _ref2[0], results = _ref2[1];
      $("." + selected_class).removeClass(selected_class);
      notice($(results[Dialog.selected]).addClass(selected_class).find("a").trigger("onselect").attr("href"));
      $("." + quick_num).remove();
      max_num = Math.min(9, results.length - 1);
      for (index = _i = 0; 0 <= max_num ? _i <= max_num : _i >= max_num; index = 0 <= max_num ? ++_i : --_i) {
        $(results[rabs(Dialog.selected + index, results.length)]).prepend($("<span>", {
          "class": quick_num
        }).text(index));
      }
      _results = [];
      for (index = _j = max_num; max_num <= 0 ? _j <= 0 : _j >= 0; index = max_num <= 0 ? ++_j : --_j) {
        _results.push((_ref3 = $("." + quick_num + ":contains(" + index + ")").get(0)) != null ? _ref3.scrollIntoViewIfNeeded() : void 0);
      }
      return _results;
    };

    notice = function(msg) {
      var cmdBox, style;
      cmdBox = $(CmdBox.cmdBox());
      if ($("#" + notice_id).length === 0) {
        style = "right: " + (cmdBox.outerWidth()) + "px; height:" + (cmdBox.outerHeight()) + "px; line-height:" + (cmdBox.outerHeight()) + "px; width: " + (dialogBox().outerWidth() - cmdBox.outerWidth() - 12) + "px";
        $("body").prepend($("<div>", {
          id: notice_id,
          style: style
        }));
      }
      return $("#" + notice_id).text(msg);
    };

    Dialog.start = function(o) {
      var _ref2, _ref3;
      _ref2 = [true, null, o.newtab, o.search, o.ontab], dialogMode = _ref2[0], lastKeyword = _ref2[1], newTab = _ref2[2], searchFunc = _ref2[3], tabFunc = _ref2[4];
      CmdBox.set({
        title: o.title,
        pressDown: handleInput,
        pressUp: o.callback,
        content: (_ref3 = o.content) != null ? _ref3 : ""
      });
      return searchFunc(CmdBox.get().content);
    };

    Dialog.stop = function(force) {
      var box, _i, _len, _ref2;
      if (!(dialogMode || force)) {
        return;
      }
      _ref2 = [dialogBox(), $("#" + notice_id), CmdBox];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        box = _ref2[_i];
        box.remove();
      }
      return dialogMode = false;
    };

    Dialog.draw = function(msg) {
      var buildResult, results, source, sources, u;
      if (!dialogMode) {
        return false;
      }
      sources = msg.urls || msg.sources;
      searching = false;
      if (msg.searching) {
        searching = true;
        return setResultBox([$("<div>").html("Searching...")]);
      } else if (sources.length === 0) {
        return setResultBox([$("<div>").html("No results found!")]);
      } else {
        buildResult = function(s, href) {
          var description, onClick, title, _ref2;
          onClick = function(e) {
            if (!(s.onclick && s.onclick.call("", e))) {
              Post({
                action: "Tab.openUrl",
                url: href,
                newtab: e.ctrlKey
              });
            }
            return false;
          };
          title = (s.title ? "" + s.title + " -- " : "");
          description = "" + title + ((_ref2 = s.description) != null ? _ref2 : s.url);
          return $("<a>", {
            href: href != null ? href : "#",
            title: s.title,
            text: description,
            click: onClick
          }).bind("onselect", s.onselect);
        };
        results = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = sources.length; _i < _len; _i++) {
            source = sources[_i];
            if ($.isArray(source.url)) {
              _results.push((function() {
                var _j, _len1, _ref2, _results1;
                _ref2 = source.url;
                _results1 = [];
                for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                  u = _ref2[_j];
                  _results1.push(buildResult(source, u));
                }
                return _results1;
              })());
            } else {
              _results.push(buildResult(source, source.url));
            }
          }
          return _results;
        })();
        return setResultBox(results);
      }
    };

    next = function(direction) {
      if (direction == null) {
        direction = 1;
      }
      return setSelected(rabs(Dialog.selected + direction, $("." + search_result).length));
    };

    prev = function(dirction) {
      if (dirction == null) {
        dirction = 1;
      }
      return next(-1 * dirction);
    };

    handleInput = function(e) {
      var key;
      key = getKey(e);
      if (key.match(/<Tab>/) && tabFunc && tabFunc.call('', e)) {
        KeyEvent.stopPropagation(e);
        return true;
      }
      if (key.match(/<(?:C|M)-(\d)>|<Up>|<S-Tab>|<Down>|<Tab>|Control/)) {
        KeyEvent.stopPropagation(e);
        if (key.match(/<(?:C|M)-(\d)>/)) {
          next(Number(RegExp.$1));
          Dialog.openCurrent();
        }
        if (key === Option.get("autocomplete_prev")) {
          prev();
        }
        if (key === Option.get("autocomplete_next")) {
          next();
        }
        if (key === Option.get("autocomplete_prev_10")) {
          prev(10);
        }
        if (key === Option.get("autocomplete_next_10")) {
          next(10);
        }
        return;
      }
      if (!isEscapeKey(key)) {
        return setTimeout(delayToWaitKeyDown, 100);
      }
    };

    delayToWaitKeyDown = function() {
      var keyword;
      keyword = CmdBox.get().content;
      if (lastKeyword !== keyword) {
        Dialog.draw({
          searching: true
        });
        clearTimeout(lastSearchTimeout);
        return lastSearchTimeout = setTimeout(searchFunc, 300, lastKeyword = keyword);
      }
    };

    Dialog.openCurrentNewTab = function() {
      return Dialog.open(true);
    };

    Dialog.openCurrentNewTab.description = "Open selected URL in new tab";

    Dialog.open = function(keep_open) {
      return setTimeout(Dialog.openCurrent, 500, keep_open);
    };

    Dialog.current = function() {
      return $("." + selected_class + " a");
    };

    Dialog.openCurrent = function(keep_open) {
      if (searching) {
        return setTimeout(Dialog.openCurrent, 100, keep_open);
      }
      if (!dialogMode) {
        return false;
      }
      clickElement(Dialog.current(), {
        "ctrl": keep_open || newTab
      });
      if (!keep_open) {
        return Dialog.stop();
      }
    };

    return Dialog;

  }).call(this);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Dialog = Dialog;

}).call(this);
