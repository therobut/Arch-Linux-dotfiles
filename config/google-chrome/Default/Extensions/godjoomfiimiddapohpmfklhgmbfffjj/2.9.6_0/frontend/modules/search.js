// Generated by CoffeeScript 1.6.3
(function() {
  var Search, root;

  Search = (function() {
    var direction, find, findTimeoutID, handleInput, highlightClass, highlightCurrentId, lastSearch, searchMode, _ref, _ref1,
      _this = this;

    function Search() {}

    _ref = [null, null, null, null], searchMode = _ref[0], direction = _ref[1], lastSearch = _ref[2], findTimeoutID = _ref[3];

    _ref1 = ["__vrome_search_highlight", "__vrome_search_highlight_current"], highlightClass = _ref1[0], highlightCurrentId = _ref1[1];

    Search.backward = function() {
      return Search.start(-1);
    };

    desc(Search.backward, "Start backward search (with selected text)");

    Search.start = function(offset) {
      var _ref2;
      if (offset == null) {
        offset = 1;
      }
      _ref2 = [true, offset], searchMode = _ref2[0], direction = _ref2[1];
      return CmdBox.set({
        title: (direction > 0 ? "Forward search: ?" : "Backward search: /"),
        pressUp: handleInput,
        content: getSelected() || lastSearch || ""
      });
    };

    desc(Search.start, "Start forward search (with selected text)");

    Search.stop = function() {
      if (!searchMode) {
        return;
      }
      searchMode = false;
      CmdBox.remove();
      return Search.removeHighlights();
    };

    Search.removeHighlights = function() {
      return $("body").unhighlight({
        className: highlightClass
      });
    };

    handleInput = function(e) {
      if (!searchMode) {
        return;
      }
      if (!(/Enter/.test(getKey(e)) || isControlKey(getKey(e)))) {
        Search.removeHighlights();
      }
      lastSearch = CmdBox.get().content;
      return find(lastSearch);
    };

    find = function(keyword) {
      $('body').highlight(keyword, {
        className: highlightClass
      });
      return Search.next(0);
    };

    Search.prev = function() {
      return Search.next(-1);
    };

    desc(Search.prev, "Search prev");

    Search.next = function(step) {
      var current_index, current_node, goto_index, goto_node, nodes, offset, _ref2;
      if (step == null) {
        step = 1;
      }
      if (!searchMode) {
        return;
      }
      offset = direction * step * times();
      nodes = $("." + highlightClass);
      if (nodes.length === 0) {
        return false;
      }
      current_node = nodes.filter("#" + highlightCurrentId).removeAttr("id");
      current_index = Math.max(0, nodes.index(current_node));
      goto_index = rabs(current_index + offset, nodes.length);
      goto_node = $(nodes[goto_index]);
      if (isElementVisible(goto_node, true)) {
        return (_ref2 = goto_node.attr("id", highlightCurrentId).get(0)) != null ? _ref2.scrollIntoViewIfNeeded() : void 0;
      }
    };

    desc(Search.next, "Search next");

    Search.openCurrentNewTab = function() {
      return Search.openCurrent(true);
    };

    desc(Search.openCurrentNewTab, "Open selected element in a new tab");

    Search.openCurrent = function(new_tab) {
      if (!searchMode) {
        return;
      }
      clickElement($("#" + highlightCurrentId), {
        ctrl: new_tab
      });
      return this.stop();
    };

    desc(Search.openCurrent, "Open selected element in current tab");

    Search.onAcceptKeyPressed = function() {
      if (!searchMode) {
        return;
      }
      if (CmdBox.isActive()) {
        return InsertMode.blurFocus();
      } else {
        return Search.openCurrent(false);
      }
    };

    return Search;

  }).call(this);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Search = Search;

}).call(this);
