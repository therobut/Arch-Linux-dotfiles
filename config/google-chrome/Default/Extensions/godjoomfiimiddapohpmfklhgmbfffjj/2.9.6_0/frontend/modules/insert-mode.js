// Generated by CoffeeScript 1.6.3
(function() {
  var InsertMode, root;

  InsertMode = (function() {
    var caretPosition, caretPositionOfAboveLine, caretPositionOfCurrentLine, caretPositionOfNext2Line, caretPositionOfNextLine, currentElement, elem, lineStart, next2LineStart, nextLineStart, prevLineStart, storedValues, value, _ref,
      _this = this;

    function InsertMode() {}

    _ref = [], elem = _ref[0], caretPosition = _ref[1], value = _ref[2], lineStart = _ref[3], prevLineStart = _ref[4], nextLineStart = _ref[5], next2LineStart = _ref[6];

    storedValues = [];

    InsertMode.storeLastValue = function() {
      if (value !== storedValues[-1]) {
        return storedValues.push(value);
      }
    };

    currentElement = function() {
      var err;
      elem = document.activeElement;
      try {
        if (elem) {
          caretPosition = elem.selectionEnd;
          value = elem.value || elem.innerText;
          lineStart = caretPositionOfCurrentLine();
          prevLineStart = caretPositionOfAboveLine();
          nextLineStart = caretPositionOfNextLine();
          next2LineStart = caretPositionOfNext2Line();
          InsertMode.storeLastValue();
        }
      } catch (_error) {
        err = _error;
        Debug(err);
      }
      return elem;
    };

    caretPositionOfCurrentLine = function() {
      return value.slice(0, caretPosition).lastIndexOf("\n") + 1;
    };

    caretPositionOfAboveLine = function() {
      return value.slice(0, +(caretPositionOfCurrentLine() - 2) + 1 || 9e9).lastIndexOf("\n") + 1;
    };

    caretPositionOfNextLine = function() {
      var position;
      position = value.slice(caretPosition).indexOf("\n");
      if (position === -1) {
        return value.length + 1;
      }
      return caretPosition + position + 1;
    };

    caretPositionOfNext2Line = function() {
      var position;
      position = value.slice(nextLineStart).indexOf("\n");
      if (position === -1) {
        return value.length + 1;
      }
      return nextLineStart + position + 1;
    };

    InsertMode.blurFocus = function() {
      return $(currentElement()).blur();
    };

    InsertMode.focusFirstTextInput = function() {
      var elems;
      elems = $("input[type=\"text\"],input[type=\"password\"],input[type=\"search\"],input:not([type])").filter(':visible');
      return $(elems[times() - 1]).focus().select();
    };

    desc(InsertMode.focusFirstTextInput, "Focus the {count} input field");

    InsertMode.restoreLastValue = function() {
      var _ref1;
      return elem.value = (_ref1 = storedValues.pop()) != null ? _ref1 : value;
    };

    desc(InsertMode.restoreLastValue, "Undo last change");

    InsertMode.moveToFirstOrSelectAll = function() {
      var _ref1;
      return (_ref1 = currentElement()) != null ? _ref1.setSelectionRange(0, (caretPosition === 0 ? value.length : 0)) : void 0;
    };

    desc(InsertMode.moveToFirstOrSelectAll, "Move to first words or select all");

    InsertMode.moveToEnd = function() {
      var _ref1;
      return (_ref1 = currentElement()) != null ? _ref1.setSelectionRange(value.length, value.length) : void 0;
    };

    desc(InsertMode.moveToEnd, "Move to end");

    InsertMode.moveToBeginCurrentLine = function() {
      elem = currentElement();
      return elem != null ? elem.setSelectionRange(lineStart, lineStart) : void 0;
    };

    desc(InsertMode.moveToBeginCurrentLine, "Move to the beginning of the line");

    InsertMode.moveToEndCurrentLine = function() {
      elem = currentElement();
      return elem != null ? elem.setSelectionRange(nextLineStart - 1, nextLineStart - 1) : void 0;
    };

    desc(InsertMode.moveToEndCurrentLine, "Move forwards to end of the line");

    InsertMode.deleteToBeginCurrentLine = function() {
      elem = currentElement();
      elem.value = value.slice(0, lineStart) + value.slice(caretPosition);
      return elem != null ? elem.setSelectionRange(lineStart, lineStart) : void 0;
    };

    desc(InsertMode.deleteToBeginCurrentLine, "Delete to the beginning of the line");

    InsertMode.deleteToEndCurrentLine = function() {
      elem = currentElement();
      elem.value = value.slice(0, caretPosition) + value.slice(nextLineStart - 1);
      return elem != null ? elem.setSelectionRange(caretPosition, caretPosition) : void 0;
    };

    desc(InsertMode.deleteToEndCurrentLine, "Delete forwards to end of the line");

    InsertMode.deleteForwardChar = function() {
      elem = currentElement();
      elem.value = value.substr(0, caretPosition) + value.substr(caretPosition + 1);
      return elem != null ? elem.setSelectionRange(caretPosition, caretPosition) : void 0;
    };

    desc(InsertMode.deleteForwardChar, "Delete forward char. <M-(yuio)> for delete back/forward a word/char");

    InsertMode.deleteBackwardChar = function() {
      elem = currentElement();
      elem.value = value.substr(0, caretPosition - 1) + value.substr(caretPosition);
      return elem != null ? elem.setSelectionRange(caretPosition - 1, caretPosition - 1) : void 0;
    };

    desc(InsertMode.deleteBackwardChar, "Delete backward char. <M-(yuio)> for delete back/forward a word/char");

    InsertMode.deleteBackwardWord = function() {
      var position;
      elem = currentElement();
      elem.value = value.substr(0, caretPosition).replace(/[^\s\n.,]*?.\s*$/, "") + value.substr(caretPosition);
      position = elem.value.length - (value.length - caretPosition);
      return elem != null ? elem.setSelectionRange(position, position) : void 0;
    };

    desc(InsertMode.deleteBackwardWord, "Delete backward word. <M-(yuio)> for delete back/forward a word/char");

    InsertMode.deleteForwardWord = function() {
      elem = currentElement();
      elem.value = value.substr(0, caretPosition) + value.substr(caretPosition).replace(/^\s*.[^\s\n.,]*/, "");
      return elem != null ? elem.setSelectionRange(caretPosition, caretPosition) : void 0;
    };

    desc(InsertMode.deleteForwardWord, "Delete forward word. <M-(yuio)> for delete back/forward a word/char");

    InsertMode.moveBackwardWord = function() {
      var str;
      elem = currentElement();
      str = value.substr(0, caretPosition).replace(/[^\s\n.,]*?.\s*$/, "");
      return elem != null ? elem.setSelectionRange(str.length, str.length) : void 0;
    };

    desc(InsertMode.moveBackwardWord, "Move backward word. <M-(hjkl)> for move back/forward a word/char");

    InsertMode.moveForwardWord = function() {
      var position;
      elem = currentElement();
      position = value.length - value.substr(caretPosition).replace(/^\s*.[^\s\n.,]*/, "").length;
      return elem != null ? elem.setSelectionRange(position, position) : void 0;
    };

    desc(InsertMode.moveForwardWord, "Move forward word. <M-(hjkl)> for move back/forward a word/char");

    InsertMode.moveBackwardChar = function() {
      elem = currentElement();
      return elem.setSelectionRange(caretPosition - 1, caretPosition - 1);
    };

    desc(InsertMode.moveBackwardChar, "Move backward char. <M-(hjkl)> for move back/forward a word/char");

    InsertMode.moveForwardChar = function() {
      elem = currentElement();
      return elem.setSelectionRange(caretPosition + 1, caretPosition + 1);
    };

    desc(InsertMode.moveForwardChar, "Move forward char. <M-(hjkl)> for move back/forward a word/char");

    InsertMode.moveForwardLine = function() {
      var start;
      elem = currentElement();
      start = Math.min(nextLineStart + (caretPosition - lineStart), next2LineStart - 1);
      return elem.setSelectionRange(start, start);
    };

    desc(InsertMode.moveForwardLine, "Move forward line. <M-(nm)> for move back/forward a line");

    InsertMode.moveBackwardLine = function() {
      var start;
      elem = currentElement();
      start = Math.min(prevLineStart + (caretPosition - lineStart), lineStart - 1);
      return elem.setSelectionRange(start, start);
    };

    desc(InsertMode.moveBackwardLine, "Move backward line. <M-(nm)> for move back/forward a line");

    InsertMode.externalEditorCallBack = function(msg) {
      return $("[vrome_edit_id='" + msg.edit_id + "']").val(msg.value).removeAttr("vrome_edit_id");
    };

    InsertMode.externalEditor = function() {
      var column, edit_id, line, text;
      elem = currentElement();
      edit_id = String(Math.random());
      text = elem.value.substr(0, elem.selectionStart);
      line = 1 + text.replace(/[^\n]/g, "").length;
      column = 1 + text.replace(/[^]*\n/, "").length;
      elem.setAttribute("vrome_edit_id", edit_id);
      return Post({
        action: "Editor.open",
        callbackAction: "InsertMode.externalEditorCallBack",
        data: elem.value,
        edit_id: edit_id,
        line: line,
        col: column
      });
    };

    desc(InsertMode.externalEditor, "Launch the external editor");

    InsertMode.externalEditor.options = {
      editor: {
        description: "Set editor command,default 'editor' is 'gvim -f'",
        example: "set editor=gvim -f"
      }
    };

    return InsertMode;

  }).call(this);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.InsertMode = InsertMode;

}).call(this);
