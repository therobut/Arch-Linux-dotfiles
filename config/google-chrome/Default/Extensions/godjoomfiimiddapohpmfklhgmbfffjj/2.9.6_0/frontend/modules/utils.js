// Generated by CoffeeScript 1.6.3
(function() {
  var initFunctions, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Platform = {
    linux: navigator.userAgent.indexOf("Linux") !== -1,
    mac: navigator.userAgent.indexOf("Mac") !== -1,
    win: navigator.userAgent.indexOf("Windows") !== -1
  };

  root.getSelected = function() {
    return window.getSelection().toString();
  };

  root.times = function(raw, read) {
    if (raw) {
      return KeyEvent.times(read);
    } else {
      return KeyEvent.times(read) || 1;
    }
  };

  root.isElementVisible = function(elem, in_full_page) {
    var elemBottom, elemLeft, elemRight, elemTop, offset, style, winBottom, winLeft, winRight, winTop, _ref, _ref1;
    if (!$(elem).is(':visible')) {
      return false;
    }
    style = window.getComputedStyle($(elem).get(0));
    if (style.getPropertyValue('visibility') !== 'visible' || style.getPropertyValue('display') === 'none' || style.getPropertyValue('opacity') === '0') {
      return false;
    }
    if (in_full_page) {
      return true;
    }
    _ref = [$(window).scrollTop(), $(window).scrollLeft()], winTop = _ref[0], winLeft = _ref[1];
    winBottom = winTop + window.innerHeight;
    winRight = winLeft + $(window).width();
    offset = $(elem).offset();
    _ref1 = [offset.top, offset.left], elemTop = _ref1[0], elemLeft = _ref1[1];
    elemBottom = elemTop + $(elem).height();
    elemRight = elemLeft + $(elem).width();
    return (elemBottom >= winTop) && (elemTop <= winBottom) && (elemLeft <= winRight) && (elemRight >= winLeft);
  };

  root.clickElement = function(elem, opt) {
    var e, event, event_type, old_target, _i, _j, _len, _len1, _ref;
    if (opt == null) {
      opt = {};
    }
    if (Platform.mac) {
      opt["meta"] = opt["ctrl"];
    }
    if (elem.length) {
      for (_i = 0, _len = elem.length; _i < _len; _i++) {
        e = elem[_i];
        clickElement(e, opt);
      }
      return;
    }
    old_target = null;
    if (opt["meta"] || opt["ctrl"]) {
      opt["shift"] = Option.get("follow_new_tab") === 1;
    } else {
      old_target = elem.getAttribute("target");
      elem.removeAttribute("target");
    }
    _ref = ["mousedown", "mouseup", "click"];
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      event_type = _ref[_j];
      event = document.createEvent("MouseEvents");
      event.initMouseEvent(event_type, true, true, window, 0, 0, 0, 0, 0, !!opt.ctrl, !!opt.alt, !!opt.shift, !!opt.meta, 0, null);
      elem.dispatchEvent(event);
    }
    if (old_target) {
      return elem.setAttribute("target", old_target);
    }
  };

  initFunctions = [];

  root.runIt = function(func, args) {
    var f, _results;
    if ($.isArray(func)) {
      initFunctions = initFunctions.concat(func);
    } else if ($.isFunction(func)) {
      initFunctions.push([func, args]);
    }
    if (document.body) {
      _results = [];
      while (f = initFunctions.shift()) {
        if ($.isFunction(f)) {
          _results.push(f.call());
        } else if ($.isFunction(f[0])) {
          _results.push(f[0].call("", f[1]));
        } else {
          _results.push(Debug("RunIt(Not Run): function " + f));
        }
      }
      return _results;
    } else {
      return setTimeout(runIt, 10);
    }
  };

}).call(this);
