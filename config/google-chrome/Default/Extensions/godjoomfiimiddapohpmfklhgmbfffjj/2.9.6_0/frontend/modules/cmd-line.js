// Generated by CoffeeScript 1.6.3
(function() {
  var CmdLine, root,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CmdLine = (function() {
    var cmdLineMode, commands, onClickFuc, onSelectFunc, onTabFunc, searchCommands, _ref;

    function CmdLine() {}

    _ref = [{}, null], commands = _ref[0], cmdLineMode = _ref[1];

    CmdLine.add = function(command, func, acceptArgs) {
      return commands[command] = {
        name: command,
        description: func != null ? func.description : void 0,
        func: func,
        hasArgs: acceptArgs
      };
    };

    CmdLine.start = function() {
      cmdLineMode = true;
      return Dialog.start({
        title: "Command-line",
        search: searchCommands,
        ontab: onTabFunc
      });
    };

    desc(CmdLine.start, "Start command line");

    onClickFuc = function(command) {
      return function(e) {
        var content, keywords, title, _ref1;
        _ref1 = [$(e.target).attr("title"), CmdBox.get().content.split(" ")], title = _ref1[0], keywords = _ref1[1];
        content = [title, keywords.slice(1).join(" ")].join(" ");
        CmdBox.softSet({
          content: content
        });
        command.func.call("", keywords.slice(1).join(" "));
        Dialog.stop();
        return false;
      };
    };

    onSelectFunc = function(e) {
      var content, title, _ref1;
      _ref1 = [$(e.target).attr("title"), CmdBox.get()._content.trim()], title = _ref1[0], content = _ref1[1];
      title = title + " ";
      if (title.startsWith(content) && !content.startsWith(title.trim())) {
        return CmdBox.softSet({
          content: title,
          selection: title.trimFirstStr(content)
        });
      }
    };

    onTabFunc = function(e) {
      var contents, result, title, _ref1, _ref2, _ref3;
      result = false;
      if (((_ref1 = CmdBox.get().selection) != null ? _ref1.length : void 0)) {
        CmdBox.softSet({
          content: CmdBox.get().content,
          select_last: true
        });
        return true;
      }
      _ref3 = [((_ref2 = Dialog.current()) != null ? _ref2.attr("title") : void 0) || "", CmdBox.get().content.split(" ")], title = _ref3[0], contents = _ref3[1];
      if (!title.startsWith(contents[0])) {
        contents[0] = title;
        CmdBox.softSet({
          content: contents.join(" ").trim() + " "
        });
        return true;
      }
      return false;
    };

    searchCommands = function() {
      var add_to_available, available, cmd, command, cuteCommands, key, keyword, regexp;
      keyword = CmdBox.get()._content;
      cmd = keyword.split(" ").shift();
      available = [];
      add_to_available = function(command) {
        if (__indexOf.call(available, command) < 0) {
          return available.push(command);
        }
      };
      for (key in commands) {
        command = commands[key];
        if (key.startsWith(cmd)) {
          add_to_available(command);
        }
      }
      for (key in commands) {
        command = commands[key];
        if (key.indexOf(cmd) !== -1) {
          add_to_available(command);
        }
      }
      regexp = RegExp(cmd.split('').join(".*"), 'i');
      for (key in commands) {
        command = commands[key];
        if (regexp.test(key)) {
          add_to_available(command);
        }
      }
      for (key in commands) {
        command = commands[key];
        if (regexp.test(command.description)) {
          add_to_available(command);
        }
      }
      cuteCommands = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = available.length; _i < _len; _i++) {
          command = available[_i];
          _results.push({
            title: command.name,
            description: command.description,
            onclick: onClickFuc(command),
            onselect: onSelectFunc
          });
        }
        return _results;
      })();
      return Dialog.draw({
        urls: cuteCommands,
        keyword: ""
      });
    };

    return CmdLine;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.CmdLine = CmdLine;

}).call(this);
