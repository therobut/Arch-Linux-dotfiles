// Generated by CoffeeScript 1.6.3
(function() {
  var Page, root;

  Page = (function() {
    var execMatch;

    function Page() {}

    execMatch = function(regexps) {
      var elem, elems, regexp, value, _i, _j, _len, _len1, _ref;
      elems = (function() {
        var _i, _len, _ref, _results;
        _ref = $("a, link").filter(':visible').reverse();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          _results.push([elem, $(elem).text().replace(/(^(\n|\s)+|(\s|\n)+$)/, "")]);
        }
        return _results;
      })();
      for (_i = 0, _len = regexps.length; _i < _len; _i++) {
        regexp = regexps[_i];
        for (_j = 0, _len1 = elems.length; _j < _len1; _j++) {
          _ref = elems[_j], elem = _ref[0], value = _ref[1];
          if (new RegExp(regexp, "i").test(value)) {
            return clickElement(elem);
          }
        }
      }
    };

    Page.copySelected = function() {
      var text;
      text = getSelected();
      Clipboard.copy(text);
      return CmdBox.set({
        title: "[Copied]" + (text.replace(/^(.{80})(.*)/, '$1...')),
        timeout: 4000
      });
    };

    desc(Page.copySelected, "Copy selected text");

    Page.showInfo = function() {
      return CmdBox.set({
        title: document.title,
        timeout: 4000
      });
    };

    desc(Page.showInfo, "Show page info");

    Page.next = function() {
      return execMatch(Option.get("nextpattern"));
    };

    desc(Page.next, "Paginate forward");

    Page.next.options = {
      nextpattern: {
        description: "Pattern(s) for next page",
        example: "set nextpattern+=^NextPage|››$ OR set nextpattern=['(下|后)一(页|頁)', '^Next$', '^>$']"
      }
    };

    Page.prev = function() {
      return execMatch(Option.get("previouspattern"));
    };

    desc(Page.prev, "Paginate backward");

    Page.prev.options = {
      previouspattern: {
        description: "Pattern(s) for prev page",
        example: "set previouspattern+=^PrevPage|‹‹$ OR set previouspattern=['(上|前)一(页|頁)', '^Prev(ious)?']"
      }
    };

    return Page;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Page = Page;

}).call(this);
