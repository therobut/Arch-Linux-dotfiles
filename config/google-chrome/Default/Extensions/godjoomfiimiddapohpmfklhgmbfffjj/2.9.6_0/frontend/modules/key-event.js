// Generated by CoffeeScript 1.6.3
(function() {
  var KeyEvent, root;

  KeyEvent = (function() {
    var bindings, currentKeys, disableVrome, filterKey, ignoreKey, keyTimes, passNextKey, runCurrentKeys, showStatusLine, storeLast, _ref,
      _this = this;

    function KeyEvent() {}

    _ref = [null, null, "", 0, []], disableVrome = _ref[0], passNextKey = _ref[1], currentKeys = _ref[2], keyTimes = _ref[3], bindings = _ref[4];

    KeyEvent.init = function() {
      var disablesite, _i, _len, _ref1;
      _ref1 = Option.get("disablesites").split(", ");
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        disablesite = _ref1[_i];
        if (RegExp("^\\s*$").test(disablesite)) {
          continue;
        }
        if (new RegExp(disablesite, "i").test(location.href)) {
          KeyEvent.disable();
        }
      }
      if (!document.vromeEventListenerAdded) {
        document.addEventListener("keydown", KeyEvent.exec, true);
        return document.vromeEventListenerAdded = true;
      }
    };

    KeyEvent.add = function(keys, func, insert_mode) {
      return bindings.push([keys, func, !!insert_mode]);
    };

    KeyEvent.stopPropagation = function(e) {
      e.stopPropagation();
      return e.preventDefault();
    };

    KeyEvent.enable = function() {
      var _ref1;
      _ref1 = [false, false], disableVrome = _ref1[0], passNextKey = _ref1[1];
      Post({
        action: "Vrome.enable"
      });
      return KeyEvent.reset();
    };

    KeyEvent.disable = function() {
      if (Option.get("show_disabled_text")) {
        CmdBox.set({
          title: " -- PASS THROUGH -- ",
          mouseOverTitle: function(e) {
            return CmdBox.remove();
          }
        });
      }
      disableVrome = true;
      return Post({
        action: "Vrome.disable"
      });
    };

    desc(KeyEvent.disable, "Disable Vrome");

    KeyEvent.disable.options = {
      disablesites: {
        description: "Disable Vrome in those sites, Multiple URLs can be separated with ','",
        example: "set disablesites=mail.google.com, reader.google.com"
      },
      enable_vrome_key: {
        description: "Key to enable Vrome again",
        example: "set enable_vrome_key=<Esc>"
      },
      show_disabled_text: {
        description: "Show Vrome Disabled text or not, You could also know this from the Action Icon",
        example: "set show_disable_text=0"
      }
    };

    KeyEvent.passNextKey = function() {
      if (Option.get("show_disabled_text")) {
        CmdBox.set({
          title: " -- PASS THROUGH (next) -- ",
          timeout: 2000
        });
      }
      passNextKey = true;
      return Post({
        action: "Vrome.disable"
      });
    };

    desc(KeyEvent.passNextKey, "Pass next key");

    KeyEvent.reset = function() {
      var times, _ref1;
      CmdBox.remove();
      return _ref1 = ["", 0], currentKeys = _ref1[0], times = _ref1[1], _ref1;
    };

    KeyEvent.times = function(only_read) {
      var result;
      result = keyTimes;
      if (!only_read) {
        keyTimes = 0;
      }
      return result;
    };

    storeLast = function(currentKeys, times) {
      return Settings.add({
        currentKeys: currentKeys,
        times: times != null ? times : 0
      });
    };

    KeyEvent.runLast = function() {
      return runCurrentKeys(Settings.get("@currentKeys"));
    };

    desc(KeyEvent.runLast, "Repeat the last command");

    filterKey = function(key, insertMode) {
      var configure, mode, _ref1;
      configure = Settings.get("@configure");
      mode = (insertMode ? "imap" : "map");
      if (/^\d$/.test(key)) {
        return key;
      }
      return (configure != null ? (_ref1 = configure[mode]) != null ? _ref1[key] : void 0 : void 0) || key;
    };

    ignoreKey = function(key, insertMode) {
      var configure, mode, _ref1;
      configure = Settings.get("@configure");
      mode = (insertMode ? "iunmap" : "unmap");
      return (configure != null ? (_ref1 = configure[mode]) != null ? _ref1[key] : void 0 : void 0) != null;
    };

    showStatusLine = function(currentKeys, times) {
      if (Option.get("showstatus") && currentKeys) {
        return CmdBox.set({
          title: "" + (times || "") + currentKeys,
          timeout: 500
        });
      }
    };

    runCurrentKeys = function(keys, insertMode, e) {
      var binding, binding_command, binding_function, binding_mode, err, escaped_command, key, last_times, map_times, regexp, someBindingMatched, someFunctionCalled, _i, _len, _ref1;
      if (!keys) {
        return;
      }
      _ref1 = [(e ? getKey(e) : null), null], key = _ref1[0], last_times = _ref1[1];
      if (key === "." && !insertMode) {
        last_times = Settings.get("@times");
        keyTimes = (last_times || 1) * (keyTimes || 1);
      } else {
        last_times = keyTimes;
      }
      for (_i = 0, _len = bindings.length; _i < _len; _i++) {
        binding = bindings[_i];
        if (keyTimes > 0 && keys.match(/^\d$/)) {
          break;
        }
        binding_command = binding[0], binding_function = binding[1], binding_mode = binding[2];
        if (!!insertMode !== binding_mode) {
          continue;
        }
        escaped_command = binding_command.replace(/([(\[{\\^$|)?*+.])/g, "\\$1");
        regexp = new RegExp("^(\\d*)(" + escaped_command + ")$");
        if (regexp.test(keys)) {
          someFunctionCalled = true;
          keys.replace(regexp, "");
          map_times = Number(RegExp.$1);
          if (map_times > 0) {
            keyTimes = map_times * (keyTimes || 1);
          }
          try {
            binding_function.call(e);
          } catch (_error) {
            err = _error;
            Debug(err);
          }
          if (map_times > 0) {
            keyTimes = last_times;
          }
        }
        regexp = new RegExp("^(" + (keys.replace(/([(\[{\\^$|)?*+.])/g, "\\$1")) + ")");
        if (regexp.test(binding_command)) {
          someBindingMatched = true;
        }
      }
      if (someBindingMatched && !someFunctionCalled) {
        showStatusLine(currentKeys, keyTimes);
      }
      if (someFunctionCalled && e && (key !== ".") && !insertMode) {
        storeLast(keys, keyTimes);
      }
      if (!someBindingMatched || someFunctionCalled) {
        currentKeys = "";
      }
      if (!someFunctionCalled && !insertMode && /^\d$/.test(key)) {
        keyTimes = (keyTimes || 0) * 10 + Number(key);
      }
      if (someFunctionCalled && key) {
        keyTimes = 0;
      }
      if (e && someFunctionCalled) {
        if (!(isAcceptKey(key) && (insertMode || Hint.isHintAble(document.activeElement)))) {
          KeyEvent.stopPropagation(e);
        }
      }
      if (e && (key != null ? key.match(/^.$/) : void 0) && (!insertMode)) {
        return KeyEvent.stopPropagation(e);
      }
    };

    KeyEvent.exec = function(e) {
      var insertMode, key;
      key = getKey(e);
      insertMode = /^INPUT|TEXTAREA|SELECT$/i.test(e.target.nodeName) || (e.target.getAttribute("contenteditable") != null);
      if (!insertMode && (passNextKey || (disableVrome && isCtrlEscapeKey(key)))) {
        return KeyEvent.enable();
      }
      if (/^(Control|Alt|Shift)$/.test(key)) {
        return KeyEvent.stopPropagation(e);
      }
      if (disableVrome) {
        return;
      }
      currentKeys = filterKey(currentKeys.concat(key), insertMode);
      if (ignoreKey(currentKeys, insertMode)) {
        return;
      }
      return runCurrentKeys(currentKeys, insertMode, e);
    };

    return KeyEvent;

  }).call(this);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.KeyEvent = KeyEvent;

}).call(this);
