// Generated by CoffeeScript 1.6.3
(function() {
  var Zoom, root;

  Zoom = (function() {
    var currentLevel, default_index, levels, setZoom;

    function Zoom() {}

    levels = ["30%", "50%", "67%", "80%", "90%", "100%", "110%", "120%", "133%", "150%", "170%", "190%", "220%", "250%", "280%", "310%"];

    default_index = levels.indexOf("100%");

    currentLevel = function() {
      var index, _ref, _ref1;
      index = levels.indexOf(typeof document !== "undefined" && document !== null ? (_ref = document.body) != null ? (_ref1 = _ref.style) != null ? _ref1.zoom : void 0 : void 0 : void 0);
      if (index === -1) {
        return default_index;
      } else {
        return index;
      }
    };

    setZoom = function(count, keepCurrentPage) {
      var index, level, topPercent;
      index = (count ? currentLevel() + times() * count : default_index);
      index = Math.min(levels.length - 1, Math.max(0, index));
      level = index - default_index;
      Settings.add({
        zoom_level: index - default_index,
        scope_key: "host"
      });
      topPercent = scrollY / document.height;
      document.body.style.zoom = levels[index];
      if (keepCurrentPage) {
        return scrollTo(0, topPercent * document.height);
      }
    };

    Zoom.zoomIn = function() {
      return setZoom(1);
    };

    desc(Zoom.zoomIn, "Zoom in, based on the center of the screen");

    Zoom.out = function() {
      return setZoom(-1);
    };

    desc(Zoom.out, "Zoom out, based on the center of the screen");

    Zoom.more = function() {
      return setZoom(3);
    };

    desc(Zoom.more, "3x Zoom in, based on the center of the screen");

    Zoom.reduce = function() {
      return setZoom(-3);
    };

    desc(Zoom.reduce, "3x Zoom out, based on the center of the screen");

    Zoom.reset = function() {
      return setZoom();
    };

    desc(Zoom.reset, "Zoom reset, based on the center of the screen");

    Zoom.current_in = function() {
      return setZoom(1, true);
    };

    desc(Zoom.current_in, "Zoom in, based on the beginning of the screen");

    Zoom.current_out = function() {
      return setZoom(-1, true);
    };

    desc(Zoom.current_out, "Zoom out, based on the beginning of the screen");

    Zoom.current_more = function() {
      return setZoom(3, true);
    };

    desc(Zoom.current_more, "x3 Zoom in, based on the beginning of the screen");

    Zoom.current_reduce = function() {
      return setZoom(-3, true);
    };

    desc(Zoom.current_reduce, "x3 Zoom out, based on the beginning of the screen");

    Zoom.current_reset = function() {
      return setZoom(0, true);
    };

    desc(Zoom.current_reset, "Zoom reset, based on the beginning of the screen");

    Zoom.current = function() {
      return parseInt(levels[currentLevel()]) / 100;
    };

    Zoom.init = function() {
      return setZoom(Settings.get("zoom_level"));
    };

    return Zoom;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Zoom = Zoom;

}).call(this);
