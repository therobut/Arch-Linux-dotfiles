// Generated by CoffeeScript 1.6.3
(function() {
  var Hint, root;

  Hint = (function() {
    var copyElementText, copyElementUrl, currentKey, delayToWaitKeyDown, elements, execCurrent, focusElement, freshHints, getCurrentAction, handleInput, hintKeyToNumber, hintKeys, hintMatch, hintMode, hintable, invertFilter, multiMode, newTab, numberToHintKey, openUrlIncognito, removeHighlightBox, setCurrentKeys, setMatched, setSelected, showElementInfo, subActions, title, _ref,
      _this = this;

    function Hint() {}

    _ref = [], newTab = _ref[0], multiMode = _ref[1], hintMode = _ref[2], elements = _ref[3], currentKey = _ref[4];

    hintable = "a,textarea,select,button,area[href],input:not([type=hidden]),*[onclick],*[onmouseover],[contenteditable],.js-new-tweets-bar";

    hintable += ",[role=link],[role=checkbox],[role=button],[role=tab],[role=menubar]";

    Hint.isHintAble = function(elem) {
      return $(elem).parent().find(hintable).toArray().indexOf(elem) !== -1;
    };

    title = function() {
      var mode, sub_action, _ref1;
      mode = multiMode ? ['multi mode'] : (newTab ? ['new tab'] : []);
      if (sub_action = (_ref1 = getCurrentAction()) != null ? _ref1.hint : void 0) {
        mode.push(sub_action);
      }
      return "Hint " + (mode.length > 0 ? "{" + (mode.join(',')) + "}" : '');
    };

    removeHighlightBox = function(create_after_remove) {
      $("#__vim_hint_highlight").remove();
      if (create_after_remove) {
        $("body").append($("<div>", {
          id: "__vim_hint_highlight"
        }));
      }
      return $("#__vim_hint_highlight");
    };

    freshHints = function() {
      var class_name, elem, highlight_box, hint_key, index, offset, span, _i, _len, _ref1, _ref2, _results;
      highlight_box = removeHighlightBox(true);
      _ref2 = (_ref1 = Hint.matched) != null ? _ref1 : [];
      _results = [];
      for (index = _i = 0, _len = _ref2.length; _i < _len; index = ++_i) {
        elem = _ref2[index];
        hint_key = numberToHintKey(index + 1);
        class_name = "normal";
        if (hint_key === (Hint.currentKeys || numberToHintKey(1))) {
          class_name = "active";
        }
        if (!hint_key.startsWith(Hint.currentKeys)) {
          class_name = "hidden";
        }
        if (Hint.currentKeys) {
          hint_key = $("<key>", {
            text: Hint.currentKeys
          }).get(0).outerHTML + hint_key.trimFirst(Hint.currentKeys);
        }
        span = $("<span>", {
          vrome_highlight: class_name,
          html: hint_key
        });
        $(highlight_box).append(span);
        offset = $(elem).offset();
        _results.push(span.offset({
          left: offset.left - 6,
          top: offset.top
        }));
      }
      return _results;
    };

    setMatched = function(elems) {
      Hint.matched = elems;
      return freshHints();
    };

    setSelected = function(num) {
      Hint.selected = num;
      freshHints();
      CmdBox.set({
        title: (Hint.selected > 0 ? "" + (title()) + " (" + (numberToHintKey(Hint.selected)) + ")" : title())
      });
      if ((Hint.selected * hintKeys().length) > Hint.matched.length) {
        return setTimeout(execCurrent, 200);
      }
    };

    setCurrentKeys = function(str) {
      Hint.currentKeys = str;
      return setSelected(hintKeyToNumber(Hint.currentKeys));
    };

    hintKeys = function() {
      var hint_keys;
      hint_keys = Option.get("useletters") === 1 ? Option.get("hintkeys") || "asdfghjklqwertyuiopzxcvbnm" : "1234567890";
      return hint_keys.slice(-1) + hint_keys.slice(0, -1);
    };

    numberToHintKey = function(number) {
      var hint_keys, key, _ref1;
      _ref1 = ["", hintKeys()], key = _ref1[0], hint_keys = _ref1[1];
      while (number !== 0) {
        key = hint_keys[number % hint_keys.length] + key;
        number = parseInt(number / hint_keys.length);
      }
      return key;
    };

    hintKeyToNumber = function(keys) {
      var hint_keys, number, _ref1;
      _ref1 = [0, hintKeys()], number = _ref1[0], hint_keys = _ref1[1];
      while (keys !== "") {
        number = (number * hint_keys.length) + hint_keys.indexOf(keys[0]);
        keys = keys.slice(1);
      }
      return number;
    };

    Hint.multiModeStart = function() {
      return Hint.start(true, true);
    };

    desc(Hint.multiModeStart, "Same as `f`, but could open multiple links");

    Hint.newTabStart = function() {
      return Hint.start(true);
    };

    desc(Hint.newTabStart, "Same as `f`, but open in new tabs");

    Hint.start = function(new_tab, multi_mode) {
      var e, _ref1;
      _ref1 = [true, new_tab, multi_mode], hintMode = _ref1[0], newTab = _ref1[1], multiMode = _ref1[2];
      setMatched(elements = (function() {
        var _i, _len, _ref2, _results;
        _ref2 = $(hintable).not("#_vrome_cmd_input_box");
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          e = _ref2[_i];
          if (isElementVisible(e)) {
            _results.push(e);
          }
        }
        return _results;
      })());
      setCurrentKeys("");
      return CmdBox.set({
        title: title(),
        pressDown: handleInput,
        content: ""
      });
    };

    desc(Hint.start, "Start Hint mode");

    Hint.start.options = {
      hintkeys: {
        description: "Keys used to generate hints",
        example: "set hintkeys=jlkhfsdagwerui"
      },
      useletters: {
        description: "Use letters or numbers to generate hints, if equal 0, then hintkeys will be ignored",
        example: "set useletters=1"
      }
    };

    Hint.remove = function() {
      if (!hintMode) {
        return false;
      }
      CmdBox.remove();
      removeHighlightBox();
      return hintMode = false;
    };

    handleInput = function(e) {
      currentKey = getKey(e);
      if ((hintKeys().indexOf(currentKey) !== -1) || (currentKey === "<BackSpace>" && Hint.selected !== 0)) {
        setCurrentKeys(currentKey === "<BackSpace>" ? Hint.currentKeys.slice(0, -1) : "" + Hint.currentKeys + currentKey);
        return KeyEvent.stopPropagation(e);
      } else {
        if (!isEscapeKey(currentKey)) {
          return setTimeout(delayToWaitKeyDown, 20);
        }
      }
    };

    hintMatch = function(elem) {
      var filter, invert, key, match, regexp, text, value;
      invert = getCurrentAction() === invertFilter;
      filter = CmdBox.get().content.trimFirst((function() {
        var _results;
        _results = [];
        for (key in subActions) {
          value = subActions[key];
          _results.push(key);
        }
        return _results;
      })());
      regexp = new RegExp(filter, "im");
      text = $(elem).val() || $(elem).text() || $(elem).attr("placeholder");
      match = regexp.test(text) || regexp.test(PinYin.shortcut(text)) || regexp.test(PinYin.full(text));
      if (invert && filter !== "") {
        return !match;
      } else {
        return match;
      }
    };

    delayToWaitKeyDown = function() {
      var elem;
      setMatched((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          elem = elements[_i];
          if (hintMatch(elem)) {
            _results.push(elem);
          }
        }
        return _results;
      })());
      if (isCtrlAcceptKey(currentKey)) {
        return execCurrent(Hint.matched);
      } else if (isAcceptKey(currentKey) || Hint.matched.length === 1) {
        return execCurrent();
      } else {
        return CmdBox.set({
          title: title()
        });
      }
    };

    getCurrentAction = function(content) {
      var action_name;
      action_name = (content || CmdBox.get().content).substring(0, 1);
      return subActions[action_name];
    };

    showElementInfo = function(elem) {
      return CmdBox.set({
        title: elem.outerHTML.escape()
      });
    };

    showElementInfo.hint = "show info";

    focusElement = function(elem) {
      return elem.focus();
    };

    focusElement.hint = "focus";

    copyElementUrl = function(elem) {
      var text;
      text = Url.fixRelativePath($(elem).attr("href"));
      Clipboard.copy(text);
      return CmdBox.set({
        title: "[Copied] " + text,
        timeout: 4000
      });
    };

    copyElementUrl.hint = "copy url";

    copyElementText = function(elem) {
      var text;
      text = $(elem).val() || $(elem).text();
      Clipboard.copy(text);
      return CmdBox.set({
        title: "[Copied] " + text,
        timeout: 4000
      });
    };

    copyElementText.hint = "copy text";

    openUrlIncognito = function(elem) {
      return Post({
        action: "Tab.openUrl",
        url: Url.fixRelativePath($(elem).attr("href")),
        incognito: true
      });
    };

    openUrlIncognito.hint = "incognito";

    invertFilter = {};

    invertFilter.hint = "invert";

    subActions = {
      ";": focusElement,
      "?": showElementInfo,
      "[": copyElementUrl,
      "{": copyElementText,
      "\\": openUrlIncognito,
      "!": invertFilter
    };

    execCurrent = function(elems) {
      var currentAction, e, elem, tag_name, type, _i, _len, _ref1, _ref2;
      if (elems == null) {
        elems = null;
      }
      elems = elems || [Hint.matched[Math.max(0, Hint.selected - 1)]];
      for (_i = 0, _len = elems.length; _i < _len; _i++) {
        elem = elems[_i];
        currentAction = getCurrentAction();
        tag_name = (_ref1 = $(elem).prop("tagName")) != null ? _ref1.toLowerCase() : void 0;
        type = (_ref2 = $(elem).prop("type")) != null ? _ref2.toLowerCase() : void 0;
        if ($.isFunction(currentAction)) {
          Hint.remove();
          currentAction(elem);
        } else {
          if (tag_name === "a") {
            clickElement(elem, {
              ctrl: newTab
            });
          } else if ($(elem).attr("onclick")) {
            clickElement(elem);
          } else if ($(elem).attr("onmouseover")) {
            $(elem).mouseover();
          } else if ((tag_name === "input" && (type === "submit" || type === "button" || type === "reset" || type === "radio" || type === "checkbox")) || tag_name === "button") {
            clickElement(elem);
          } else if (tag_name === "input" || tag_name === "textarea") {
            try {
              $(elem).select();
            } catch (_error) {
              e = _error;
              clickElement(elem);
            }
          } else if (tag_name === "select") {
            $(elem).focus();
          } else {
            clickElement(elem);
          }
          newTab = true;
        }
      }
      if (multiMode) {
        setCurrentKeys("");
        return CmdBox.set({
          title: title()
        });
      } else {
        return setTimeout(Hint.remove, 200);
      }
    };

    return Hint;

  }).call(this);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Hint = Hint;

}).call(this);
